//https://dev.to/paras594/how-to-use-populate-in-mongoose-node-js-mo0

import mongoose from "mongoose";
const Schema = mongoose.Schema;

const UserSchema = new Schema({
  name: String,
  email: String,
  blogs: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Blog",
    },
  ],
});

const BlogSchema = new Schema({
  title: String,
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
  },
  body: String,
  comments: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Comment",
    },
  ],
});

const CommentSchema = new Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
  },
  blog: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Blog",
  },
  body: String,
});

const RUser = mongoose.model("Author", UserSchema);
const RBlog = mongoose.model("Blog", BlogSchema);
const Comment = mongoose.model("Comment", CommentSchema);

module.exports = { User, Blog, Comment };

// in your node js file
// const User = require("path/to/userSchema");

// User.findOne({ _id: userId })
//   .populate("blogs") // key to populate
//   .then((user) => {
//     res.json(user);
//   });
// Easy right? Populate is awesome for joining documents like that. You will get user with all blog documents in blogs array.
/*
OUTPUT:
 {
    _id: userid, // obviously it will be id generated by mongo
    name: "john doe",
    email: "john@email.com",
    blogs: [
        {
            _id: blogid, 
            title: "how to do nothing",
            body: "Interesting matter in 11111the blog...",
            comments: [commentId_1, commentId_2]
        }
    ]
 }
*/

// nested populate
// User
//    .findOne({_id: userId })
//    .populate({
//       path: "blogs", // populate blogs
//       populate: {
//          path: "comments" // in blogs, populate comments
//       }
//    })
//    .then(user => {
//       res.json(user);
//    });
/*
OUTPUT:
 {
    _id: userid, // obviously it will be id generated by mongo
    name: "john doe",
    email: "john@email.com",
    blogs: [
        {
            _id: blogid, 
            title: "how to do nothing",
            body: "Interesting matter in the blog...",
            comments: [
                {
                    user: userId,
                    blog: blogId,
                    body: "your blog is awesome !"
                }
            ]
        }
    ]
 }
*/
